version: "3.8"

services:
  # OpenTelemetry Collector
  otel-collector:
    build:
      context: .
      dockerfile: build/otel-collector/Dockerfile
    ports:
      - "4317:4317" # OTLP gRPC receiver
      - "4318:4318" # OTLP HTTP receiver
      - "8888:8888" # Prometheus metrics exposed by the collector
      - "8889:8889" # Prometheus exporter metrics
    networks:
      - observability

  # Jaeger for tracing
  jaeger:
    image: jaegertracing/all-in-one:1.52
    ports:
      - "16686:16686" # Jaeger UI
      - "14268:14268" # Jaeger collector
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - observability

  # Prometheus for metrics
  prometheus:
    build:
      context: .
      dockerfile: build/prometheus/Dockerfile
    volumes:
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - observability

  # Grafana for dashboards
  grafana:
    build:
      context: .
      dockerfile: build/grafana/Dockerfile
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - observability
    depends_on:
      - prometheus
      - jaeger

  # Your application
  order-service:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - SERVICE_NAME=order-service
      - OTEL_ENDPOINT=otel-collector:4318
      - ENVIRONMENT=development
      - LOG_LEVEL=debug
    depends_on:
      - otel-collector
    networks:
      - observability

volumes:
  prometheus-data:
  grafana-data:

networks:
  observability:
    driver: bridge
